package com.nolan.mmcs_schedule.ui.schedule_activity;

import com.nolan.mmcs_schedule.repository.ScheduleRepository;
import com.nolan.mmcs_schedule.repository.primitives.GroupAtLesson;
import com.nolan.mmcs_schedule.repository.primitives.LessonForGroup;
import com.nolan.mmcs_schedule.repository.primitives.LessonForTeacher;
import com.nolan.mmcs_schedule.repository.primitives.RoomForLesson;
import com.nolan.mmcs_schedule.repository.primitives.ScheduleOfGroup;
import com.nolan.mmcs_schedule.repository.primitives.ScheduleOfTeacher;
import com.nolan.mmcs_schedule.repository.primitives.WeekType;
import com.nolan.mmcs_schedule.ui.schedule_activity.lesson_dialog.LessonForGroupDetails;
import com.nolan.mmcs_schedule.ui.schedule_activity.lesson_dialog.LessonForTeacherDetails;
import com.nolan.mmcs_schedule.utils.PrefUtils;
import com.nolan.mmcs_schedule.utils.TimeUtils;
import com.octo.android.robospice.persistence.exception.SpiceException;
import com.octo.android.robospice.request.listener.RequestListener;

import java.util.ArrayList;
import java.util.Map;
import java.util.TreeMap;

public class SchedulePresenter implements ScheduleAdapter.OnLessonClickListener {
    public interface View {
        void setTitle(String title);
        void setSubtitle(String subtitle);
        void setSchedule(ArrayList<DaySchedule> schedule);
        void showLoading();
        void showSchedule();
        void showLessonDetails(int dayIndex, int lessonIndex, LessonForTeacherDetails details);
        void showLessonDetails(int dayIndex, int lessonIndex, LessonForGroupDetails details);
        void startReportErrorActivity(String subject, String text);
        void startPickScheduleActivity();
        void startScheduleActivity(boolean isScheduleOfGroup, int id, String title);
        void onError(String message);
    }

    private interface WeekTypeOptionHolder {
        void set(WeekTypeOption weekTypeOption);
        WeekTypeOption get();
    }

    private static class SavingWeekTypeOptionHolder implements WeekTypeOptionHolder {
        private PrefUtils preferences;

        public SavingWeekTypeOptionHolder(PrefUtils preferences) {
            this.preferences = preferences;
        }

        @Override
        public WeekTypeOption get() {
            return preferences.getWeekTypeOption();
        }

        @Override
        public void set(WeekTypeOption weekTypeOption) {
            preferences.setWeekTypeOption(weekTypeOption);
        }
    }

    private static class NonSavingWeekTypeOptionHolder implements WeekTypeOptionHolder {
        private WeekTypeOption weekTypeOption;

        public NonSavingWeekTypeOptionHolder(WeekTypeOption startValue) {
            this.weekTypeOption = startValue;
        }

        @Override
        public void set(WeekTypeOption weekTypeOption) {
            this.weekTypeOption = weekTypeOption;
        }

        @Override
        public WeekTypeOption get() {
            return weekTypeOption;
        }
    }

    private View view;

    private ScheduleRepository repository;
    private PrefUtils preferences;

    private WeekTypeOptionHolder weekTypeOptionHolder;

    private WeekType weekType;

    // Data acquired from repository.
    private WeekType currentWeek;
    // One of these fields will be set. Use @code{showingScheduleOfGroup} to know which one.
    private ScheduleOfGroup scheduleOfGroup;
    private ScheduleOfTeacher scheduleOfTeacher;

    // Map from day and lesson number in displayed schedule into LessonForGroup of scheduleOfGroup
    // if preferences.getPickedScheduleOfGroup() or LessonForTeacher otherwise.
    // Key is generated by getKey().
    private Map<Integer, Object> dayNumAndLessonNumToLesson;

    public static int getKey(int day, int lesson) {
        return 100 * day + lesson;
    }

    // Data describing current state of loading.
    // Only when both current week and schedule are loaded we can show schedule. But
    // they are loading concurrently so we need some kind of synchronization.
    private boolean loadedCurrentWeek = false;
    private boolean loadedSchedule = false;

    private boolean isSavingWeekTypeOption;
    private boolean isShowingScheduleOfGroup;
    private int id;
    private String title;

    public SchedulePresenter(View view, boolean isSavingWeekTypeOption, boolean isShowingScheduleOfGroup,
                             int id, String title, ScheduleRepository repository,
                             PrefUtils preferences) {
        this.view = view;
        this.isShowingScheduleOfGroup = isShowingScheduleOfGroup;
        this.id = id;
        this.title = title;
        this.repository = repository;
        this.preferences = preferences;
        this.isSavingWeekTypeOption = isSavingWeekTypeOption;
        this.weekTypeOptionHolder =
                isSavingWeekTypeOption
                        ? new SavingWeekTypeOptionHolder(preferences)
                        : new NonSavingWeekTypeOptionHolder(WeekTypeOption.FULL);
    }

    public void start() {
        view.setTitle(title);

        repository.getCurrentWeekType(new RequestListener<WeekType>() {
            @Override
            public void onRequestFailure(SpiceException spiceException) {
                preferences.setScheduleWasPicked(false);
                view.onError("Не удалось получить текущую неделю");
            }

            @Override
            public void onRequestSuccess(WeekType wt) {
                WeekTypeOption weekTypeOption = weekTypeOptionHolder.get();
                currentWeek = wt;
                weekType = getWeekType(weekTypeOption);
                view.setSubtitle(getSubtitle(weekTypeOption));
                loadedCurrentWeek = true;
                showScheduleIfLoadingDone();
            }
        });

        if (isShowingScheduleOfGroup) {
            repository.getScheduleOfGroup(id, new RequestListener<ScheduleOfGroup>() {
                @Override
                public void onRequestFailure(SpiceException spiceException) {
                    preferences.setScheduleWasPicked(false);
                    view.onError("Ошибка при загрузке расписания");
                }

                @Override
                public void onRequestSuccess(ScheduleOfGroup schedule) {
                    scheduleOfGroup = schedule;
                    loadedSchedule = true;
                    showScheduleIfLoadingDone();
                }
            });
        } else {
            repository.getScheduleOfTeacher(id, new RequestListener<ScheduleOfTeacher>() {
                @Override
                public void onRequestFailure(SpiceException spiceException) {
                    preferences.setScheduleWasPicked(false);
                    view.onError("Ошибка при загрузке расписания");
                }

                @Override
                public void onRequestSuccess(ScheduleOfTeacher schedule) {
                    scheduleOfTeacher = schedule;
                    loadedSchedule = true;
                    showScheduleIfLoadingDone();
                }
            });
        }
    }

    private void showScheduleIfLoadingDone() {
        if (!loadedCurrentWeek || !loadedSchedule) return;
        view.setSchedule(isShowingScheduleOfGroup ? getWeekForGroup() : getWeekForTeacher());
    }

    private ArrayList<DaySchedule> getWeekForGroup() {
        ArrayList<DaySchedule> schedule = new ArrayList<>();
        dayNumAndLessonNumToLesson = new TreeMap<>();
        for (int i = 0; i < scheduleOfGroup.getDays().size(); ++i) {
            ArrayList<Lesson> lessons = new ArrayList<>();
            for (LessonForGroup lesson : scheduleOfGroup.getDays().get(i)) {
                if (weekType != WeekType.FULL
                        && lesson.getWeekType() != WeekType.FULL
                        && lesson.getWeekType() != weekType) {
                    continue;
                }
                Lesson textual = new Lesson(
                        lesson.getPeriod().getBegin().toString(),
                        lesson.getPeriod().getEnd().toString(),
                        lesson.getSubjectName(),
                        WeekType.FULL != weekType ? "" : weekTypeToString(lesson.getWeekType()));
                dayNumAndLessonNumToLesson.put(getKey(schedule.size(), lessons.size()), lesson);
                lessons.add(textual);
            }
            if (!lessons.isEmpty()) {
                schedule.add(new DaySchedule(TimeUtils.getDisplayDayOfWeek(i), lessons));
            }
        }
        return schedule;
    }

    private ArrayList<DaySchedule> getWeekForTeacher() {
        ArrayList<DaySchedule> schedule = new ArrayList<>();
        dayNumAndLessonNumToLesson = new TreeMap<>();
        for (int i = 0; i < scheduleOfTeacher.getDays().size(); ++i) {
            ArrayList<Lesson> lessons = new ArrayList<>();
            for (LessonForTeacher lesson : scheduleOfTeacher.getDays().get(i)) {
                if (weekType != WeekType.FULL
                        && lesson.getWeekType() != WeekType.FULL
                        && lesson.getWeekType() != weekType) {
                    continue;
                }
                Lesson textual = new Lesson(
                        lesson.getPeriod().getBegin().toString(),
                        lesson.getPeriod().getEnd().toString(),
                        lesson.getSubjectName(),
                        weekType == WeekType.FULL ? weekTypeToString(lesson.getWeekType()) : "");
                dayNumAndLessonNumToLesson.put(getKey(schedule.size(), lessons.size()), lesson);
                lessons.add(textual);
            }
            if (!lessons.isEmpty()) {
                schedule.add(new DaySchedule(TimeUtils.getDisplayDayOfWeek(i), lessons));
            }
        }
        return schedule;
    }

    public void onPickAnotherSchedule() {
        preferences.setScheduleWasPicked(false);
        view.startPickScheduleActivity();
    }

    public WeekType getWeekType(WeekTypeOption weekTypeOption) {
        switch (weekTypeOption) {
            case CURRENT: return currentWeek;
            case FULL: return WeekType.FULL;
            case UPPER: return WeekType.UPPER;
            case LOWER: return WeekType.LOWER;
            default: throw new Error("unreachable statement");
        }
    }

    public void onWeekTypeOptionChanged(WeekTypeOption weekTypeOption) {
        weekTypeOptionHolder.set(weekTypeOption);
        weekType = getWeekType(weekTypeOption);
        view.setSubtitle(getSubtitle(weekTypeOption));
        // TODO: Agrhhh
        showScheduleIfLoadingDone();
    }

    private static String str(WeekType weekType) {
        switch (weekType) {
            case UPPER: return "верхняя";
            case LOWER: return "нижняя";
            case FULL: return "";
            default: throw new Error("unreachable statement");
        }
    }

    private String getSubtitle(WeekTypeOption weekTypeOption) {
        switch (weekTypeOption) {
            case CURRENT: return "текущая \"" + str(currentWeek) + "\"";
            case FULL: return str(WeekType.FULL);
            case UPPER: return str(WeekType.UPPER);
            case LOWER: return str(WeekType.LOWER);
            default: throw new Error("unreachable statement");
        }
    }

    private static String weekTypeToString(WeekType weekType) {
        switch (weekType) {
            case FULL:  return "";
            case LOWER: return "нижняя неделя";
            case UPPER: return "верхняя неделя";
            default: throw new Error("unreachable statement");
        }
    }

    public void onReportError() {
        String subject = "Ошибка в расписании";
        // todo: Fill text with grade,group/teacher name information
        view.startReportErrorActivity(subject, "");
    }

    @Override
    public void onLessonClick(int dayIndex, int lessonIndex) {
        Object lesson = dayNumAndLessonNumToLesson.get(getKey(dayIndex, lessonIndex));
        if (isShowingScheduleOfGroup) {
            view.showLessonDetails(
                    dayIndex, lessonIndex, new LessonForGroupDetails((LessonForGroup) lesson));
        } else {
            view.showLessonDetails(
                    dayIndex, lessonIndex, new LessonForTeacherDetails((LessonForTeacher) lesson));
        }
    }

    public void onShowSchedule(int dayIndex, int lessonIndex, int teacherOfGroupIndex) {
        if (isShowingScheduleOfGroup) {
            LessonForGroup lesson =
                    (LessonForGroup) dayNumAndLessonNumToLesson.get(getKey(dayIndex, lessonIndex));
            RoomForLesson room = lesson.getRooms().get(teacherOfGroupIndex);
            view.startScheduleActivity(false, room.getTeacherId(), room.getTeacherName());
        } else {
            LessonForTeacher lesson =
                    (LessonForTeacher) dayNumAndLessonNumToLesson.get(getKey(dayIndex, lessonIndex));
            final GroupAtLesson groupAtLesson = lesson.getGroups().get(teacherOfGroupIndex);
            view.showLoading();
            repository.getGroupId(groupAtLesson.getGradeNum(), groupAtLesson.getGroupNum(),
                    new RequestListener<Integer>() {
                        @Override
                        public void onRequestFailure(SpiceException spiceException) {
                            view.onError("Ошибка при загрузе расписания группы");
                            view.showSchedule();
                        }

                        @Override
                        public void onRequestSuccess(Integer integer) {
                            view.showSchedule();
                            view.startScheduleActivity(true, integer, groupAtLesson.getName());
                        }
                    });
        }
    }

    public boolean isChangeScheduleButtonVisible() {
        return isSavingWeekTypeOption;
    }
}
